{"version":3,"sources":["AddCard.tsx","CardView.tsx","App.tsx","model/StudyItem.ts","index.tsx"],"names":["AddCard","props","useState","currentQuestion","setCurrentQuestion","currentAnswer","setCurrentAnswer","Items","addedItems","map","item","Box","sx","display","justifyContent","Typography","py","flexWrap","id","bgcolor","p","m","borderRadius","style","fontFamily","question","answer","Button","onClick","setAddedItems","filter","startIcon","height","flexDirection","textAlign","alignItems","my","mx","variant","setIsPracticingCards","TextField","label","multiline","defaultValue","onInput","e","target","value","itemAdded","length","CardView","revealAnswer","setRevealAnswer","currentIndex","setCurrentIndex","isRandomizeCards","setIsRandomizeCards","showAddedItems","className","FormGroup","row","FormControlLabel","checked","onChange","ev","control","Switch","component","color","Math","max","idsNotCurrent","Array","from","keys","floor","random","min","App","isPracticingCards","studyItems","localStorage","getItem","JSON","parse","getStudyItems","useEffect","itemsToSave","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8de6ae52.chunk.js","sourcesContent":["import { TextField, Box, Button, Typography, Grid } from \"@mui/material\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\n\nimport React, { FC, useState } from \"react\";\nimport \"./App.css\";\n\nexport type Item = {\n    question: string;\n    answer: string;\n    id: number;\n};\n\ntype AddCardProps = {\n    setIsPracticingCards: (curState: boolean) => void;\n    addedItems: Item[];\n    setAddedItems: (items: Item[]) => void;\n};\n\nconst AddCard = (props: AddCardProps) => {\n    const [currentQuestion, setCurrentQuestion] = useState<string>(\"\");\n    const [currentAnswer, setCurrentAnswer] = useState<string>(\"\");\n\n    const onHandleDelete = (id: number) => {\n        props.setAddedItems(props.addedItems.filter((item) => item.id != id));\n    };\n    const Items = props.addedItems.map((item) => {\n        return (\n            <Box\n                key={item.id}\n                sx={{ display: \"flex\", justifyContent: \"space-between\" }}\n            >\n                <Typography sx={{ py: 2 }} flexWrap=\"wrap\">{`${\n                    item.id + 1\n                }.`}</Typography>\n                <Box bgcolor=\"#F6FAFD\" sx={{ p: 1, m: 1, borderRadius: \"10%\" }}>\n                    <Typography>\n                        <pre style={{ fontFamily: \"inherit\" }}>\n                            {item.question}\n                        </pre>\n                    </Typography>\n                </Box>\n                <Box bgcolor=\"#f5ffea\" sx={{ p: 1, m: 1, borderRadius: \"10%\" }}>\n                    <Typography>\n                        <pre style={{ fontFamily: \"inherit\" }}>\n                            {item.answer}\n                        </pre>\n                    </Typography>\n                </Box>\n                <Button\n                    onClick={() => {\n                        onHandleDelete(item.id);\n                    }}\n                    startIcon={<DeleteIcon />}\n                ></Button>\n            </Box>\n        );\n    });\n\n    const onClickAddItem = (itemAdded: Item) => {\n        props.setAddedItems([...props.addedItems, itemAdded]);\n    };\n\n    return (\n        <Box\n            sx={{\n                display: \"flex\",\n                height: \"100%\",\n                flexDirection: \"column\",\n                textAlign: \"center\",\n                alignItems: \"center\",\n                my: 12,\n                mx: \"26%\",\n            }}\n        >\n            <Button\n                variant=\"contained\"\n                onClick={() => props.setIsPracticingCards(true)}\n            >\n                Practice Cards\n            </Button>\n\n            {Items}\n            <Box sx={{ display: \"flex\", flexDirection: \"row\" }}>\n                <Box>\n                    <TextField\n                        id=\"outlined-basic\"\n                        label=\"Add question\"\n                        multiline\n                        defaultValue={currentQuestion}\n                        sx={{ mx: 2 }}\n                        onInput={(e) =>\n                            setCurrentQuestion(\n                                (e.target as HTMLInputElement).value\n                            )\n                        }\n                        variant=\"standard\"\n                    />\n                </Box>\n                <Box>\n                    <TextField\n                        id=\"outlined-basic\"\n                        label=\"Add answer\"\n                        multiline\n                        defaultValue={currentAnswer}\n                        onInput={(e) =>\n                            setCurrentAnswer(\n                                (e.target as HTMLInputElement).value\n                            )\n                        }\n                        variant=\"standard\"\n                    />\n                </Box>\n            </Box>\n            <Button\n                onClick={() =>\n                    onClickAddItem({\n                        question: currentQuestion,\n                        answer: currentAnswer,\n                        id: props.addedItems.length,\n                    })\n                }\n            >\n                {\" \"}\n                Add Item{\" \"}\n            </Button>\n        </Box>\n    );\n};\n\nexport default AddCard;\n","import {\n    Box,\n    Card,\n    CardContent,\n    FormGroup,\n    FormControlLabel,\n    Button,\n    Switch,\n    CardMedia,\n    Typography,\n} from \"@mui/material\";\nimport { useState } from \"react\";\nimport { Item } from \"./AddCard\";\n\ntype CardViewProps = {\n    addedItems: Item[];\n    setIsPracticingCards: (state: boolean) => void;\n};\n\nconst CardView = (props: CardViewProps) => {\n    const [revealAnswer, setRevealAnswer] = useState(false);\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const [isRandomizeCards, setIsRandomizeCards] = useState(false);\n\n    const onHandleNextClick = () => {\n        const idsNotCurrent = Array.from(\n            Array(props.addedItems.length).keys()\n        ).filter((id) => id != props.addedItems[currentIndex].id);\n        if (isRandomizeCards) {\n            setCurrentIndex(\n                idsNotCurrent[\n                    Math.floor(Math.random() * (props.addedItems.length - 1))\n                ]\n            );\n        } else\n            setCurrentIndex(\n                Math.min(currentIndex + 1, props.addedItems.length - 1)\n            );\n    };\n    // const testArray = [\"hello\"];\n\n    const showAddedItems = props.addedItems.map((item) => {\n        return (\n            <div className={`flip-card ${revealAnswer ? \"reveal-answer\" : \"\"}`}>\n                <div className=\"flip-card-inner\">\n                    <div className=\"flip-card-front\">\n                        <div className=\"card-content\">{item.question}</div>\n                    </div>\n                    <div className=\"flip-card-back\">\n                        <div className=\"card-content\">{item.answer}</div>\n                    </div>\n                </div>\n            </div>\n        );\n    });\n\n    return (\n        <div className=\"card-view\">\n            <div className=\"card-view-controls\">\n                <Button\n                    variant=\"outlined\"\n                    onClick={() => {\n                        props.setIsPracticingCards(false);\n                    }}\n                >\n                    Modify Cards\n                </Button>\n                <FormGroup row={true}>\n                    <FormControlLabel\n                        checked={revealAnswer}\n                        onChange={(ev) => {\n                            setRevealAnswer(\n                                (ev.target as HTMLInputElement).checked\n                            );\n                        }}\n                        control={<Switch />}\n                        label=\"Reveal Answers\"\n                    />\n                    <FormControlLabel\n                        checked={isRandomizeCards}\n                        onChange={(ev) => {\n                            setIsRandomizeCards(\n                                (ev.target as HTMLInputElement).checked\n                            );\n                        }}\n                        control={<Switch />}\n                        label=\"Randomize Cards\"\n                    />\n                </FormGroup>\n            </div>\n            <div className=\"card-view-header\">\n                <Typography\n                    variant=\"h5\"\n                    component=\"h2\"\n                    color=\"#2a77d2\"\n                    textAlign=\"center\"\n                >\n                    Long press card to view answer\n                </Typography>\n            </div>\n            <div className=\"card-view-center\">\n                <Button\n                    variant=\"outlined\"\n                    onClick={() => {\n                        setCurrentIndex(Math.max(currentIndex - 1, 0));\n                    }}\n                    sx={{ mx: 3 }}\n                >\n                    〈{\" \"}\n                </Button>\n                {showAddedItems[currentIndex]}\n\n                <Button\n                    variant=\"outlined\"\n                    onClick={onHandleNextClick}\n                    sx={{ mx: 3 }}\n                >\n                    〉\n                </Button>\n            </div>\n        </div>\n    ); //showAddedItems.length ?\n};\n\nexport default CardView;\n","import React, { FC, useEffect, useState } from \"react\";\nimport AddCard, { Item } from \"./AddCard\";\nimport \"./App.css\";\nimport CardView from \"./CardView\";\nimport { getStudyItems, saveStudyItems } from \"./model/StudyItem\";\n\nconst App: FC = () => {\n    const [isPracticingCards, setIsPracticingCards] = useState(false);\n    const [addedItems, setAddedItems] = useState<Item[]>(\n        getStudyItems() as Item[]\n    );\n    useEffect(() => {\n        saveStudyItems(addedItems);\n    }, addedItems);\n    return !isPracticingCards ? (\n        <AddCard\n            addedItems={addedItems}\n            setAddedItems={setAddedItems}\n            setIsPracticingCards={setIsPracticingCards}\n        />\n    ) : (\n        <CardView\n            setIsPracticingCards={setIsPracticingCards}\n            addedItems={addedItems}\n        />\n    );\n};\n\nexport default App;\n","export type StudyItem = {\n    question: string;\n    answer: string;\n};\n\nexport const saveStudyItems = (itemsToSave: StudyItem[]) => {\n    localStorage.setItem(\"studyItems\", JSON.stringify(itemsToSave));\n};\n\nexport const getStudyItems = (): StudyItem[] => {\n    let studyItems = localStorage.getItem(\"studyItems\");\n    return studyItems ? JSON.parse(studyItems) : [];\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}